{
    "benchmarks.Suite.time_pixel_tree_creation": {
        "code": "class Suite:\n    def time_pixel_tree_creation(self):\n        PixelTreeBuilder.from_healpix(self.pixel_list)\n\n    def setup(self):\n        self.pixel_list = [HealpixPixel(8, pixel) for pixel in np.arange(100000)]",
        "min_run_count": 2,
        "name": "benchmarks.Suite.time_pixel_tree_creation",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "b253603a95d873d4a9a8bdf0fd8e8845cfc04dd474b6a5f8f4ae10540eb19006",
        "warmup_time": -1
    },
    "benchmarks.time_test_alignment_even_sky": {
        "code": "def time_test_alignment_even_sky():\n    \"\"\"Create alignment from an even distribution at order 7\"\"\"\n    initial_histogram = np.full(hp.order2npix(7), 40)\n    result = hist.generate_alignment(initial_histogram, highest_order=7, threshold=1_000)\n    # everything maps to order 5, given the density\n    for mapping in result:\n        assert mapping[0] == 5",
        "min_run_count": 2,
        "name": "benchmarks.time_test_alignment_even_sky",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "c4d4cd79963d85a8084022a7439520a28a2bd2b3f63e581aeb1604b2d4f3d2ac",
        "warmup_time": -1
    },
    "benchmarks.time_test_cone_filter_multiple_order": {
        "code": "def time_test_cone_filter_multiple_order():\n    \"\"\"Create a catalog cone filter where we have multiple orders in the catalog\"\"\"\n    catalog_info = CatalogInfo(\n        **{\n            \"catalog_name\": \"test_name\",\n            \"catalog_type\": \"object\",\n            \"total_rows\": 10,\n            \"epoch\": \"J2000\",\n            \"ra_column\": \"ra\",\n            \"dec_column\": \"dec\",\n        }\n    )\n    pixels = [HealpixPixel(6, 30), HealpixPixel(7, 124), HealpixPixel(7, 5000)]\n    catalog = Catalog(catalog_info, pixels)\n    filtered_catalog = catalog.filter_by_cone(47.1, 6, 30)\n    assert filtered_catalog.get_healpix_pixels() == [HealpixPixel(6, 30), HealpixPixel(7, 124)]",
        "min_run_count": 2,
        "name": "benchmarks.time_test_cone_filter_multiple_order",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "1b8e1bb21a1e4ede9063e5c908697ec779d7fdd7aa4d51e70d0010e7e1171f10",
        "warmup_time": -1
    },
    "version": 2
}