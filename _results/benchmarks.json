{
    "benchmarks.MetadataSuite.time_load_partition_info_association": {
        "code": "class MetadataSuite:\n    def time_load_partition_info_association(self, cache):\n        PartitionInfo.read_from_dir(cache[2])\n\n    def setup_cache(self):\n        root_dir = os.getcwd()\n    \n        ## Create partition info for catalog a (only at order 7)\n        pixel_list_a = [HealpixPixel(7, pixel) for pixel in np.arange(100_000)]\n        catalog_path_a = os.path.join(root_dir, \"catalog_a\")\n        os.makedirs(catalog_path_a, exist_ok=True)\n        partition_info = PartitionInfo.from_healpix(pixel_list_a)\n        partition_info.write_to_file(os.path.join(catalog_path_a, \"partition_info.csv\"))\n    \n        ## Create partition info for catalog a (only at order 6)\n        pixel_list_b = [HealpixPixel(6, pixel) for pixel in np.arange(25_000)]\n        catalog_path_b = os.path.join(root_dir, \"catalog_b\")\n        os.makedirs(catalog_path_b, exist_ok=True)\n        partition_info = PartitionInfo.from_healpix(pixel_list_b)\n        partition_info.write_to_file(os.path.join(catalog_path_b, \"partition_info.csv\"))\n    \n        ## Fake an association catalog between the two\n        association_catalog_path = os.path.join(root_dir, \"association_a_b\")\n        os.makedirs(association_catalog_path, exist_ok=True)\n        tree_a = PixelTree.from_healpix(pixel_list_a)\n        tree_b = PixelTree.from_healpix(pixel_list_b)\n        alignment = align_trees(tree_a, tree_b)\n        partition_info = PartitionInfo.from_healpix(alignment.pixel_tree.get_healpix_pixels())\n        partition_info.write_to_file(os.path.join(association_catalog_path, \"partition_info.csv\"))\n    \n        return (catalog_path_a, catalog_path_b, association_catalog_path)",
        "min_run_count": 2,
        "name": "benchmarks.MetadataSuite.time_load_partition_info_association",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "benchmarks:71",
        "type": "time",
        "unit": "seconds",
        "version": "4c81f20218c4cd820c108dc0df7e6094029eb8049406e99fb33fccd975ab44a5",
        "warmup_time": -1
    },
    "benchmarks.MetadataSuite.time_load_partition_info_order6": {
        "code": "class MetadataSuite:\n    def time_load_partition_info_order6(self, cache):\n        PartitionInfo.read_from_dir(cache[1])\n\n    def setup_cache(self):\n        root_dir = os.getcwd()\n    \n        ## Create partition info for catalog a (only at order 7)\n        pixel_list_a = [HealpixPixel(7, pixel) for pixel in np.arange(100_000)]\n        catalog_path_a = os.path.join(root_dir, \"catalog_a\")\n        os.makedirs(catalog_path_a, exist_ok=True)\n        partition_info = PartitionInfo.from_healpix(pixel_list_a)\n        partition_info.write_to_file(os.path.join(catalog_path_a, \"partition_info.csv\"))\n    \n        ## Create partition info for catalog a (only at order 6)\n        pixel_list_b = [HealpixPixel(6, pixel) for pixel in np.arange(25_000)]\n        catalog_path_b = os.path.join(root_dir, \"catalog_b\")\n        os.makedirs(catalog_path_b, exist_ok=True)\n        partition_info = PartitionInfo.from_healpix(pixel_list_b)\n        partition_info.write_to_file(os.path.join(catalog_path_b, \"partition_info.csv\"))\n    \n        ## Fake an association catalog between the two\n        association_catalog_path = os.path.join(root_dir, \"association_a_b\")\n        os.makedirs(association_catalog_path, exist_ok=True)\n        tree_a = PixelTree.from_healpix(pixel_list_a)\n        tree_b = PixelTree.from_healpix(pixel_list_b)\n        alignment = align_trees(tree_a, tree_b)\n        partition_info = PartitionInfo.from_healpix(alignment.pixel_tree.get_healpix_pixels())\n        partition_info.write_to_file(os.path.join(association_catalog_path, \"partition_info.csv\"))\n    \n        return (catalog_path_a, catalog_path_b, association_catalog_path)",
        "min_run_count": 2,
        "name": "benchmarks.MetadataSuite.time_load_partition_info_order6",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "benchmarks:71",
        "type": "time",
        "unit": "seconds",
        "version": "da2e8392fc6908d6fc39f4c1817038046fa59961051d7e31ece9252c100b794f",
        "warmup_time": -1
    },
    "benchmarks.MetadataSuite.time_load_partition_info_order7": {
        "code": "class MetadataSuite:\n    def time_load_partition_info_order7(self, cache):\n        PartitionInfo.read_from_dir(cache[0])\n\n    def setup_cache(self):\n        root_dir = os.getcwd()\n    \n        ## Create partition info for catalog a (only at order 7)\n        pixel_list_a = [HealpixPixel(7, pixel) for pixel in np.arange(100_000)]\n        catalog_path_a = os.path.join(root_dir, \"catalog_a\")\n        os.makedirs(catalog_path_a, exist_ok=True)\n        partition_info = PartitionInfo.from_healpix(pixel_list_a)\n        partition_info.write_to_file(os.path.join(catalog_path_a, \"partition_info.csv\"))\n    \n        ## Create partition info for catalog a (only at order 6)\n        pixel_list_b = [HealpixPixel(6, pixel) for pixel in np.arange(25_000)]\n        catalog_path_b = os.path.join(root_dir, \"catalog_b\")\n        os.makedirs(catalog_path_b, exist_ok=True)\n        partition_info = PartitionInfo.from_healpix(pixel_list_b)\n        partition_info.write_to_file(os.path.join(catalog_path_b, \"partition_info.csv\"))\n    \n        ## Fake an association catalog between the two\n        association_catalog_path = os.path.join(root_dir, \"association_a_b\")\n        os.makedirs(association_catalog_path, exist_ok=True)\n        tree_a = PixelTree.from_healpix(pixel_list_a)\n        tree_b = PixelTree.from_healpix(pixel_list_b)\n        alignment = align_trees(tree_a, tree_b)\n        partition_info = PartitionInfo.from_healpix(alignment.pixel_tree.get_healpix_pixels())\n        partition_info.write_to_file(os.path.join(association_catalog_path, \"partition_info.csv\"))\n    \n        return (catalog_path_a, catalog_path_b, association_catalog_path)",
        "min_run_count": 2,
        "name": "benchmarks.MetadataSuite.time_load_partition_info_order7",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "benchmarks:71",
        "type": "time",
        "unit": "seconds",
        "version": "bddf400a31023b9426ebfe4f6dc6145490bd320f93c80192299925c4a51a6e28",
        "warmup_time": -1
    },
    "benchmarks.Suite.time_inner_pixel_alignment": {
        "code": "class Suite:\n    def time_inner_pixel_alignment(self):\n        align_trees(self.pixel_tree_1, self.pixel_tree_2)\n\n    def setup(self):\n        self.pixel_list = [HealpixPixel(8, pixel) for pixel in np.arange(100000)]\n        self.pixel_tree_1 = PixelTree.from_healpix(self.pixel_list)\n        self.pixel_tree_2 = PixelTree.from_healpix(\n            [HealpixPixel(9, pixel) for pixel in np.arange(0, 400000, 4)]\n        )",
        "min_run_count": 2,
        "name": "benchmarks.Suite.time_inner_pixel_alignment",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "431c5363f39da36f5e31e36d66778137e224f54fb639625a51f62cb4c21d0a44",
        "warmup_time": -1
    },
    "benchmarks.Suite.time_outer_pixel_alignment": {
        "code": "class Suite:\n    def time_outer_pixel_alignment(self):\n        align_trees(self.pixel_tree_1, self.pixel_tree_2, alignment_type=\"outer\")\n\n    def setup(self):\n        self.pixel_list = [HealpixPixel(8, pixel) for pixel in np.arange(100000)]\n        self.pixel_tree_1 = PixelTree.from_healpix(self.pixel_list)\n        self.pixel_tree_2 = PixelTree.from_healpix(\n            [HealpixPixel(9, pixel) for pixel in np.arange(0, 400000, 4)]\n        )",
        "min_run_count": 2,
        "name": "benchmarks.Suite.time_outer_pixel_alignment",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "dcc2b55115eedf5805bcb52c36ae0f1f9d3b837e7513b05408ecbc0197b37617",
        "warmup_time": -1
    },
    "benchmarks.Suite.time_pixel_tree_creation": {
        "code": "class Suite:\n    def time_pixel_tree_creation(self):\n        PixelTree.from_healpix(self.pixel_list)\n\n    def setup(self):\n        self.pixel_list = [HealpixPixel(8, pixel) for pixel in np.arange(100000)]\n        self.pixel_tree_1 = PixelTree.from_healpix(self.pixel_list)\n        self.pixel_tree_2 = PixelTree.from_healpix(\n            [HealpixPixel(9, pixel) for pixel in np.arange(0, 400000, 4)]\n        )",
        "min_run_count": 2,
        "name": "benchmarks.Suite.time_pixel_tree_creation",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "76c0cb3b7af2250f83e1c2776004130b91d1ce71867e9fcff69c89068bf13bf9",
        "warmup_time": -1
    },
    "benchmarks.time_test_alignment_even_sky": {
        "code": "def time_test_alignment_even_sky():\n    \"\"\"Create alignment from an even distribution at order 7\"\"\"\n    initial_histogram = np.full(hp.order2npix(7), 40)\n    result = hist.generate_alignment(initial_histogram, highest_order=7, threshold=1_000)\n    # everything maps to order 5, given the density\n    for mapping in result:\n        assert mapping[0] == 5",
        "min_run_count": 2,
        "name": "benchmarks.time_test_alignment_even_sky",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "c4d4cd79963d85a8084022a7439520a28a2bd2b3f63e581aeb1604b2d4f3d2ac",
        "warmup_time": -1
    },
    "benchmarks.time_test_cone_filter_multiple_order": {
        "code": "def time_test_cone_filter_multiple_order():\n    \"\"\"Create a catalog cone filter where we have multiple orders in the catalog\"\"\"\n    catalog_info = TableProperties(\n        **{\n            \"catalog_name\": \"test_name\",\n            \"catalog_type\": \"object\",\n            \"total_rows\": 10,\n            \"ra_column\": \"ra\",\n            \"dec_column\": \"dec\",\n        }\n    )\n    pixels = [HealpixPixel(6, 30), HealpixPixel(7, 124), HealpixPixel(7, 5000)]\n    catalog = Catalog(catalog_info, pixels)\n    filtered_catalog = catalog.filter_by_cone(47.1, 6, 30 * 3600)\n    assert filtered_catalog.get_healpix_pixels() == [HealpixPixel(6, 30), HealpixPixel(7, 124)]",
        "min_run_count": 2,
        "name": "benchmarks.time_test_cone_filter_multiple_order",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "ada9f87a0abf9c0a0b0f512158bb21251f2577b5cf4a131246b2b3c4c1e67a2e",
        "warmup_time": -1
    },
    "version": 2
}