{
    "benchmarks.Suite.time_inner_pixel_alignment": {
        "code": "class Suite:\n    def time_inner_pixel_alignment(self):\n        align_trees(self.pixel_tree_1, self.pixel_tree_2)\n\n    def setup(self):\n        self.pixel_list = [HealpixPixel(8, pixel) for pixel in np.arange(100000)]\n        self.pixel_tree_1 = PixelTree.from_healpix(self.pixel_list)\n        self.pixel_tree_2 = PixelTree.from_healpix(\n            [HealpixPixel(9, pixel) for pixel in np.arange(0, 400000, 4)]\n        )",
        "min_run_count": 2,
        "name": "benchmarks.Suite.time_inner_pixel_alignment",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "431c5363f39da36f5e31e36d66778137e224f54fb639625a51f62cb4c21d0a44",
        "warmup_time": -1
    },
    "benchmarks.Suite.time_outer_pixel_alignment": {
        "code": "class Suite:\n    def time_outer_pixel_alignment(self):\n        align_trees(self.pixel_tree_1, self.pixel_tree_2, alignment_type=\"outer\")\n\n    def setup(self):\n        self.pixel_list = [HealpixPixel(8, pixel) for pixel in np.arange(100000)]\n        self.pixel_tree_1 = PixelTree.from_healpix(self.pixel_list)\n        self.pixel_tree_2 = PixelTree.from_healpix(\n            [HealpixPixel(9, pixel) for pixel in np.arange(0, 400000, 4)]\n        )",
        "min_run_count": 2,
        "name": "benchmarks.Suite.time_outer_pixel_alignment",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "dcc2b55115eedf5805bcb52c36ae0f1f9d3b837e7513b05408ecbc0197b37617",
        "warmup_time": -1
    },
    "benchmarks.Suite.time_pixel_tree_creation": {
        "code": "class Suite:\n    def time_pixel_tree_creation(self):\n        PixelTree.from_healpix(self.pixel_list)\n\n    def setup(self):\n        self.pixel_list = [HealpixPixel(8, pixel) for pixel in np.arange(100000)]\n        self.pixel_tree_1 = PixelTree.from_healpix(self.pixel_list)\n        self.pixel_tree_2 = PixelTree.from_healpix(\n            [HealpixPixel(9, pixel) for pixel in np.arange(0, 400000, 4)]\n        )",
        "min_run_count": 2,
        "name": "benchmarks.Suite.time_pixel_tree_creation",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "76c0cb3b7af2250f83e1c2776004130b91d1ce71867e9fcff69c89068bf13bf9",
        "warmup_time": -1
    },
    "benchmarks.time_open_large_catalog": {
        "code": "def time_open_large_catalog():\n    return read_hats(BENCH_DATA_DIR / \"large_catalog\")",
        "min_run_count": 2,
        "name": "benchmarks.time_open_large_catalog",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "d5f0ce161818c14dfc3be8f416b47506a1c2eabf4a66488229adeab491b4d12c",
        "warmup_time": -1
    },
    "benchmarks.time_open_midsize_catalog": {
        "code": "def time_open_midsize_catalog():\n    return read_hats(BENCH_DATA_DIR / \"midsize_catalog\")",
        "min_run_count": 2,
        "name": "benchmarks.time_open_midsize_catalog",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "9c788461f730a853037a4f81270c05bd73e17251c5499ced935736c0ab38eb9c",
        "warmup_time": -1
    },
    "benchmarks.time_small_cone_large_catalog": {
        "code": "def time_small_cone_large_catalog():\n    original_catalog = read_hats(BENCH_DATA_DIR / \"large_catalog\")\n\n    original_catalog.filter_by_cone(315, -66.443, 1)",
        "min_run_count": 2,
        "name": "benchmarks.time_small_cone_large_catalog",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "ca29ea78e2d3353af15439e07e19b7405cb4a3ad36e5a6fa9c8f49d7c6642edf",
        "warmup_time": -1
    },
    "benchmarks.time_test_alignment_even_sky": {
        "code": "def time_test_alignment_even_sky():\n    \"\"\"Create alignment from an even distribution at order 7\"\"\"\n    initial_histogram = np.full(hp.order2npix(7), 40)\n    result = hist.generate_alignment(initial_histogram, highest_order=7, threshold=1_000)\n    # everything maps to order 5, given the density\n    for mapping in result:\n        assert mapping[0] == 5",
        "min_run_count": 2,
        "name": "benchmarks.time_test_alignment_even_sky",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "c4d4cd79963d85a8084022a7439520a28a2bd2b3f63e581aeb1604b2d4f3d2ac",
        "warmup_time": -1
    },
    "benchmarks.time_test_cone_filter_multiple_order": {
        "code": "def time_test_cone_filter_multiple_order():\n    \"\"\"Create a catalog cone filter where we have multiple orders in the catalog\"\"\"\n    catalog_info = TableProperties(\n        **{\n            \"catalog_name\": \"test_name\",\n            \"catalog_type\": \"object\",\n            \"total_rows\": 10,\n            \"ra_column\": \"ra\",\n            \"dec_column\": \"dec\",\n        }\n    )\n    pixels = [HealpixPixel(6, 30), HealpixPixel(7, 124), HealpixPixel(7, 5000)]\n    catalog = Catalog(catalog_info, pixels)\n    filtered_catalog = catalog.filter_by_cone(47.1, 6, 30 * 3600)\n    assert filtered_catalog.get_healpix_pixels() == [HealpixPixel(6, 30), HealpixPixel(7, 124)]",
        "min_run_count": 2,
        "name": "benchmarks.time_test_cone_filter_multiple_order",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "ada9f87a0abf9c0a0b0f512158bb21251f2577b5cf4a131246b2b3c4c1e67a2e",
        "warmup_time": -1
    },
    "version": 2
}